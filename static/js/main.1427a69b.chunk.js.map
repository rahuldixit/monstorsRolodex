{"version":3,"sources":["components/Card/card.component.jsx","components/CardList/card-list.component.jsx","components/SearchBox/SeachBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","monster","name","alt","src","id","email","CardList","monsters","map","SearchBox","placholder","handleChange","type","placeholder","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAeeA,EAZK,SAAAC,GAChB,OACI,sBAAKC,UAAY,iBAAjB,UACI,6BACKD,EAAME,QAAQC,OAEnB,qBAAKC,IAAI,UAAUC,IAAG,8BAAyBL,EAAME,QAAQI,GAAvC,4BACtB,kCAAKN,EAAME,QAAQK,MAAnB,WCLCC,G,MAAW,SAAAR,GACpB,OAAQ,qBAAKC,UAAU,YAAf,SACPD,EAAMS,SAASC,KAAI,SAAAR,GAAO,OACvB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQI,WCLhBK,G,MAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,aACnC,OACA,uBACEZ,UAAU,SACVa,KAAK,SACLC,YAAaH,EACbI,SAAYH,MCgCHI,E,kDAlCb,aAAe,IAAD,8BACZ,gBACKC,MAAO,CACVT,SAAU,GACVU,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,SAAUe,S,oBAE1C,WAAU,IAAD,SACyBE,KAAKR,MAA9BT,EADA,EACAA,SAAUU,EADV,EACUA,YACXQ,EAAmBlB,EAASmB,QAAO,SAAA1B,GACvC,MAAiB,KAAdiB,EACMjB,EAAQC,KAAK0B,cAAcC,SAASX,EAAYU,eAGhD3B,KAGX,OAAQ,sBAAKD,UAAU,MAAf,UACN,kDACA,cAAC,EAAD,CACEc,YAAY,kBACZF,aAAe,SAAAkB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAG3D,cAAC,EAAD,CAAUxB,SAAYkB,W,GAhCVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1427a69b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-styles.css';\r\n\r\nexport const Card = props => {\r\n    return(\r\n        <div className = \"card-container\">\r\n            <h2>\r\n                {props.monster.name}\r\n            </h2>\r\n            <img alt=\"monster\" src={`http://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n            <p> {props.monster.email} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => {\r\n    return (<div className='card-list'>\r\n    {props.monsters.map(monster => (\r\n        <Card key = {monster.id} monster = {monster}/>\r\n      ))}\r\n    </div>);\r\n}","import React from 'react';\r\nimport './seachbox.styles.css';\r\n\r\nexport const SearchBox = ({placholder, handleChange}) => {\r\n    return(\r\n    <input \r\n      className='search'\r\n      type='search' \r\n      placeholder={placholder} \r\n      onChange = {handleChange}>\r\n      </input>);\r\n}\r\nexport default SearchBox;","import './App.css';\nimport { Component } from 'react';\nimport {CardList} from './components/CardList/card-list.component.jsx';\nimport {SearchBox} from './components/SearchBox/SeachBox.jsx';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state= {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => {\n      if(searchField!=='') {\n        return monster.name.toLowerCase().includes(searchField.toLowerCase());\n      }\n      else {\n        return monster;\n      }\n    });\n    return (<div className=\"App\">\n      <h1 >Monsters Rolodex</h1>\n      <SearchBox\n        placeholder='Search Monsters'\n        handleChange={ e => this.setState({searchField: e.target.value})}\n      >\n      </SearchBox>\n      <CardList monsters = {filteredMonsters}/>\n    </div>);\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}